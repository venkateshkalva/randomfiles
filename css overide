function getContrastBorderColor(bgColor, textColor) {
  const white = [255, 255, 255];
  const black = [0, 0, 0];

  const luminance = (rgb) => {
    const a = rgb.map(v => {
      v = v / 255;
      return v <= 0.03928
        ? v / 12.92
        : Math.pow((v + 0.055) / 1.055, 2.4);
    });
    return 0.2126 * a[0] + 0.7152 * a[1] + 0.0722 * a[2];
  };

  const contrast = (rgb1, rgb2) => {
    const lum1 = luminance(rgb1);
    const lum2 = luminance(rgb2);
    return (Math.max(lum1, lum2) + 0.05) / (Math.min(lum1, lum2) + 0.05);
  };

  const toRGBArray = (cssColor) => {
    const ctx = document.createElement("canvas").getContext("2d");
    ctx.fillStyle = cssColor;
    const hex = ctx.fillStyle;
    const bigint = parseInt(hex.slice(1), 16);
    return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
  };

  const bg = toRGBArray(bgColor);
  const text = toRGBArray(textColor);

  const whiteContrast = contrast(bg, white);
  const blackContrast = contrast(bg, black);

  return whiteContrast > blackContrast ? "white" : "black";
}


document.addEventListener("focusin", (e) => {
  const el = e.target;
  const style = getComputedStyle(el);
  const bgColor = style.backgroundColor;
  const textColor = style.color;
  const borderColor = getContrastBorderColor(bgColor, textColor);
  el.style.outline = "none";
  el.style.border = `2px solid ${borderColor}`;
});

document.addEventListener("focusout", (e) => {
  e.target.style.border = ""; // Reset to original style
});
