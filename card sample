<form id="quiz">
  <fieldset data-q="q1">
    <legend>Q1</legend>
    <label><input type="radio" name="q1" value="yes"> Yes</label>
    <label><input type="radio" name="q1" value="no"> No</label>
    <label><input type="radio" name="q1" value="unknown"> Unknown</label>
    <label><input type="radio" name="q1" value="not_included"> Not included</label>
  </fieldset>

  <fieldset data-q="q2">
    <legend>Q2</legend>
    <label><input type="radio" name="q2" value="yes"> Yes</label>
    <label><input type="radio" name="q2" value="no"> No</label>
    <label><input type="radio" name="q2" value="unknown"> Unknown</label>
  </fieldset>

  <fieldset data-q="q3">
    <legend>Q3</legend>
    <label><input type="radio" name="q3" value="yes"> Yes</label>
    <label><input type="radio" name="q3" value="no"> No</label>
    <label><input type="radio" name="q3" value="unknown"> Unknown</label>
  </fieldset>

  <fieldset data-q="q4">
    <legend>Q4</legend>
    <label><input type="radio" name="q4" value="yes"> Yes</label>
    <label><input type="radio" name="q4" value="no"> No</label>
  </fieldset>
</form>

<script>
  // Order matters: earliest blocker wins
  const questionOrder = ["q1", "q2", "q3", "q4"];

  // Values that disable all *later* questions
  const rules = {
    q1: new Set(["unknown", "not_included"]),
    q2: new Set(["unknown"]),
    q3: new Set(["unknown"]),
    q4: new Set([]),
  };

  const form = document.getElementById("quiz");

  function groupRadios(name) {
    return Array.from(form.querySelectorAll(`input[type="radio"][name="${name}"]`));
  }

  function selectedValue(name) {
    const r = groupRadios(name).find(i => i.checked);
    return r ? r.value : null;
  }

  function setGroupDisabled(name, disabled) {
    const inputs = groupRadios(name);
    inputs.forEach(i => {
      if (disabled) i.checked = false; // clear when disabling
      i.disabled = disabled;
    });
    // Optional: visually disable fieldset
    const fs = form.querySelector(`fieldset[data-q="${name}"]`);
    if (fs) fs.toggleAttribute('disabled', disabled);
  }

  function updateState() {
    // Start by enabling everything
    questionOrder.forEach(q => setGroupDisabled(q, false));

    // Find the earliest question whose selected value blocks following ones
    let earliestBlockIdx = -1;
    for (let i = 0; i < questionOrder.length; i++) {
      const q = questionOrder[i];
      const v = selectedValue(q);
      if (v && rules[q].has(v)) {
        earliestBlockIdx = i;
        break;
      }
    }

    // If a blocker exists, disable all *later* questions
    if (earliestBlockIdx >= 0) {
      for (let j = earliestBlockIdx + 1; j < questionOrder.length; j++) {
        setGroupDisabled(questionOrder[j], true);
      }
    }
  }

  // Wire up listeners
  questionOrder.forEach(q => {
    groupRadios(q).forEach(radio => {
      radio.addEventListener("change", updateState);
    });
  });

  // Initial pass on load
  updateState();
</script>
