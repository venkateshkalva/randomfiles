public class RequiredIfAttribute : ValidationAttribute
{
    private readonly string _otherProperty;
    private readonly int[] _triggerValues;

    public RequiredIfAttribute(string otherProperty, params int[] triggerValues)
    {
        _otherProperty = otherProperty;
        _triggerValues = triggerValues;
    }

    protected override ValidationResult IsValid(object value, ValidationContext context)
    {
        var instance = context.ObjectInstance;
        var otherProp = context.ObjectType.GetProperty(_otherProperty);
        var otherValue = (int?)otherProp.GetValue(instance);

        if (_triggerValues.Contains(otherValue ?? -1))
        {
            if (value == null || (value is string s && string.IsNullOrWhiteSpace(s)))
                return new ValidationResult(ErrorMessage);
        }
        return ValidationResult.Success;
    }
}

[RequiredIf(nameof(FireTypeID), 1, 2, 3, ErrorMessage = "Perimeter type is required.")]
public int? PerimeterTypeID { get; set; }
