using iText.Kernel.Pdf;
using iText.Kernel.Pdf.Canvas;
using iText.Kernel.Font;
using iText.IO.Font.Constants;
using System.IO;

public byte[] AddMarginLineNumbersOnly(byte[] inputPdfBytes)
{
    using var inputStream = new MemoryStream(inputPdfBytes);
    using var outputStream = new MemoryStream();

    using var reader = new PdfReader(inputStream);
    using var writer = new PdfWriter(outputStream);
    using var pdfDoc = new PdfDocument(reader, writer);

    var font = PdfFontFactory.CreateFont(StandardFonts.HELVETICA);

    for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)
    {
        var page = pdfDoc.GetPage(i);
        var canvas = new PdfCanvas(page);

        float x = 20; // Margin X
        float y = page.GetPageSize().GetTop() - 40;
        float lineHeight = 12;

        int lineCount = (int)((page.GetPageSize().GetHeight() - 80) / lineHeight);

        for (int ln = 1; ln <= lineCount; ln++)
        {
            canvas.BeginText()
                  .SetFontAndSize(font, 8)
                  .MoveText(x, y)
                  .ShowText($"{ln}")
                  .EndText();

            y -= lineHeight;
        }
    }

    pdfDoc.Close();
    return outputStream.ToArray();
}
