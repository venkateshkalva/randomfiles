using System.IO;
using iText.Kernel.Pdf;
using iText.Layout;
using iText.Layout.Element;
using iText.IO.Source;
using iText.Kernel.Pdf.Canvas.Parser;

public async Task AddLineNumbersToPdfAsync(Stream inputPdfStream, Stream outputPdfStream)
{
    var pdfReader = new PdfReader(inputPdfStream);
    var pdfWriter = new PdfWriter(outputPdfStream);
    var pdfDoc = new PdfDocument(pdfReader, pdfWriter);
    var doc = new Document(pdfDoc);

    for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)
    {
        string pageText = PdfTextExtractor.GetTextFromPage(pdfDoc.GetPage(i));
        var lines = pageText.Split('\n');

        var page = pdfDoc.GetPage(i);
        var canvas = new iText.Kernel.Pdf.Canvas.PdfCanvas(page);

        float y = page.GetPageSize().GetTop() - 20;
        float x = 20;

        int lineNumber = 1;
        foreach (var line in lines)
        {
            canvas.BeginText()
                  .SetFontAndSize(iText.Kernel.Font.PdfFontFactory.CreateFont(), 10)
                  .MoveText(x, y)
                  .ShowText($"{lineNumber++}. {line}")
                  .EndText();

            y -= 12;
        }
    }

    doc.Close();
}
