using System;
using System.IO;
using iText.Kernel.Pdf;
using iText.Kernel.Font;
using iText.IO.Font.Constants;
using iText.Kernel.Pdf.Canvas;
using iText.Kernel.Pdf.Canvas.Parser;

class Program
{
    static void Main(string[] args)
    {
        string inputPath = "input.pdf";
        string outputPath = "output.pdf";

        byte[] inputBytes = File.ReadAllBytes(inputPath);
        byte[] outputBytes = AddLineNumbersToPdf(inputBytes);

        File.WriteAllBytes(outputPath, outputBytes);

        Console.WriteLine("Line numbers added. Output saved to: " + outputPath);
    }

    static byte[] AddLineNumbersToPdf(byte[] inputPdfBytes)
    {
        using var inputStream = new MemoryStream(inputPdfBytes);
        using var outputStream = new MemoryStream();

        using var reader = new PdfReader(inputStream);
        using var writer = new PdfWriter(outputStream);
        using var pdfDoc = new PdfDocument(reader, writer);
        var font = PdfFontFactory.CreateFont(StandardFonts.HELVETICA);

        for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)
        {
            var page = pdfDoc.GetPage(i);
            var text = PdfTextExtractor.GetTextFromPage(page);
            var lines = text.Split('\n');

            var canvas = new PdfCanvas(page);
            float y = page.GetPageSize().GetTop() - 40;
            float x = 20;
            int lineNumber = 1;

            foreach (var line in lines)
            {
                canvas.BeginText()
                      .SetFontAndSize(font, 10)
                      .MoveText(x, y)
                      .ShowText($"{lineNumber++}. {line.Trim()}")
                      .EndText();
                y -= 12;
            }
        }

        pdfDoc.Close();
        return outputStream.ToArray();
    }
}
